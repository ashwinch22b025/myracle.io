# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srtPas2E9s-9o-MjC232GYlXKGLaJN_C
"""

!pip install -q -U google-generativeai

!pip install gradio

!sudo apt install tesseract-ocr
!pip install pytesseract

from PIL import Image
import pytesseract  # Using OCR to extract text from images
import io

def extract_text_from_image(image):
    try:
        # Read binary data and convert it into a PIL image
        image = Image.open(io.BytesIO(image))  # Convert binary data to PIL image
        text = pytesseract.image_to_string(image)  # Extract text using pytesseract
        return text
    except Exception as e:
        return f"Error processing image: {str(e)}"

# Process multiple images and extract their content
def process_image_descriptions(images):
    descriptions = []
    for image in images:
        text = extract_text_from_image(image)  # Pass the binary image data
        descriptions.append(text)
    return descriptions

import gradio as gr
import google.generativeai as genai
import time

# Initialize the multimodal LLM
genai.configure(api_key="AIzaSyC2LAlZzZ6PdTWyZo-WWU0YOYHuMQP0J1I")
model = genai.GenerativeModel('gemini-1.5-flash')
chat = model.start_chat(history=[])

# Function to process screenshots and optional text context
def process_screenshots(images, context):
    global chat
    system_prompt = """
    You are a testing expert. Your job is to generate detailed testing instructions based only on the provided screenshots, regardless of additional context.
    Generate detailed testing instructions for the provided screenshots.
    Each test case should include:
    -Test Case ID:Assigning a unique identifier to the test case.
    - Description: What the test case is about.
    - Pre-conditions: What needs to be set up before testing.
    - Test Data:Necessary test data required to perform the test.
    - Testing Steps: Step-by-step instructions to perform the test.
    - Expected Result: What the correct result looks like.
    Be elaborate.
     If no context is provided, infer the purpose of the screenshots and create test cases based on them.
    Do not require context if it's not provided, and always generate test cases from the visual details.

    """

    chat.history = [{"parts": [{"text": system_prompt}], "role": "user"}]

    image_descriptions = process_image_descriptions(images)

    # Join descriptions into the context for the prompt
    image_descriptions_text = "\n".join(image_descriptions)

    # Handle missing context by using the image descriptions as a fallback
    if context:
        prompt = f"Generate test cases based on these screenshots and context: {context}. Screenshots descriptions: {image_descriptions_text}"
    else:
        prompt = f"Generate test cases based on these screenshot descriptions: {image_descriptions_text}"

    response = chat.send_message(prompt)
    response.resolve()

    # Display the response step-by-step
    generated_instructions = ""
    for i in range(len(response.text)):
        time.sleep(0.005)
        generated_instructions = response.text[:i+1]
        yield generated_instructions

# Front-end design using Gradio
def build_interface():
    with gr.Blocks() as demo:
        gr.Markdown("# Test Case Generation Tool")
        with gr.Row():
            context = gr.Textbox(label="Optional Context", placeholder="Describe the app or feature for testing...")
            images = gr.File(label="Upload Screenshots", type="binary", file_count="multiple")

        output = gr.Textbox(label="Generated Testing Instructions", lines=10)

        # Button to generate instructions
        generate_button = gr.Button("Describe Testing Instructions")

        # Defining what happens when the button is clicked
        generate_button.click(
            fn=process_screenshots,
            inputs=[images, context],
            outputs=output
        )

    return demo

# Launch the Gradio interface
if __name__ == "__main__":
    demo = build_interface()
    demo.launch(debug=True)