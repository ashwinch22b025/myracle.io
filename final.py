# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1srtPas2E9s-9o-MjC232GYlXKGLaJN_C
"""

!pip install -q -U google-generativeai

!pip install gradio

import gradio as gr
import google.generativeai as genai
import time

# Initialize the multimodal LLM
genai.configure(api_key="AIzaSyC2LAlZzZ6PdTWyZo-WWU0YOYHuMQP0J1I")
model = genai.GenerativeModel('gemini-1.5-flash')
chat = model.start_chat(history=[])

# Function to process screenshots and optional text context
def process_screenshots(images, context):
    global chat
    system_prompt = """
    Generate detailed testing instructions for the provided screenshots.
    Each test case should include:
    -Test Case ID:Assigning a unique identifier to the test case.
    - Description: What the test case is about.
    - Pre-conditions: What needs to be set up before testing.
    - Test Data:Necessary test data required to perform the test.
    - Testing Steps: Step-by-step instructions to perform the test.
    - Expected Result: What the correct result looks like.
    Be elaborate.
    Don't show this line while outputting[Please provide the screenshots so I can generate detailed test cases for you.
    Once you share the screenshots, I can create test cases that follow this structure:]
    """

    chat.history = [{"parts": [{"text": system_prompt}], "role": "user"}]

    # Simulate using the images and context in the prompt
    prompt = f"Generate test cases for these screenshots based on the following context: {context}"

    response = chat.send_message(prompt)
    response.resolve()

    # Display the response step-by-step
    generated_instructions = ""
    for i in range(len(response.text)):
        time.sleep(0.005)
        generated_instructions = response.text[:i+1]
        yield generated_instructions

# Front-end design using Gradio
def build_interface():
    with gr.Blocks() as demo:
        gr.Markdown("# Test Case Generation Tool")
        with gr.Row():
            context = gr.Textbox(label="Optional Context", placeholder="Describe the app or feature for testing...")
            images = gr.File(label="Upload Screenshots", type="binary", file_count="multiple")

        output = gr.Textbox(label="Generated Testing Instructions", lines=10)

        # Button to generate instructions
        generate_button = gr.Button("Describe Testing Instructions")

        # Defining what happens when the button is clicked
        generate_button.click(
            fn=process_screenshots,
            inputs=[images, context],
            outputs=output
        )

    return demo

# Launch the Gradio interface
if __name__ == "__main__":
    demo = build_interface()
    demo.launch(debug=True)